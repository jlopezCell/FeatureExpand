from typing import Optional, Union

from stellar_sdk import scval, MuxedAccount, Keypair, Network
from stellar_sdk.contract import AssembledTransaction, ContractClient


# `IncrementContractClient` is automatically generated by stellar-contract-bindings, and you do not need to write it manually.
# See https://github.com/lightsail-network/stellar-contract-bindings
# stellar-contract-bindings python --contract-id CDMARRPKAZEZMASLYONRI4LJI6X3QLDJQ647YGQANG2PDCP746BD5U73 --rpc-url https://soroban-testnet.stellar.org
class IncrementContractClient(ContractClient):
    def increment(
            self,
            source: Union[str, MuxedAccount],
            signer: Optional[Keypair] = None,
            base_fee: int = 100,
            transaction_timeout: int = 300,
            submit_timeout: int = 30,
            simulate: bool = True,
            restore: bool = True,
    ) -> AssembledTransaction[int]:
        """Increment increments an internal counter, and returns the value."""
        global public_keypair
        print("Este es", public_keypair)
        return self.invoke(
            "balance",
            [
                scval.to_string("jlopez@gmail.com")
            ],
            parse_result_xdr_fn=lambda v: scval.from_uint32(v),
            source=source,
            signer=signer,
            base_fee=base_fee,
            transaction_timeout=transaction_timeout,
            submit_timeout=submit_timeout,
            simulate=simulate,
            restore=restore,
        )


# The source account will be used to sign and send the transaction.
# GCWY3M4VRW4NXJRI7IVAU3CC7XOPN6PRBG6I5M7TAOQNKZXLT3KAH362
source_keypair = Keypair.from_secret('SCXC3D2LFPQAAKRMUFIBGIVYLEP77KTDIRTHRIINMHAEDREXOX6Y3N3Z')
##genera la clave publica de source_keypair
print(source_keypair,source_keypair.public_key)
public_keypair = source_keypair.public_key

def parse_result_xdr_fn(v):
    if v.type == scval.SCV_U32:
        return scval.from_uint32(v)
    elif v.type == scval.SCV_U64:
        return scval.from_uint64(v)
    else:
        raise ValueError(f"Unsupported SCVal type: {v.type}")


rpc_server_url = "https://soroban-testnet.stellar.org:443"
network_passphrase = Network.TESTNET_NETWORK_PASSPHRASE
contract_address = 'CBCY4PEZ23HVUI35ADFVCHZKLEQMUMB5BKYNKWPPFGQYDWH7NMC5HN67'

client = IncrementContractClient(contract_address, rpc_server_url, network_passphrase)

transaction = client.increment(source_keypair.public_key)
transaction.parse_result_xdr_fn = lambda v: scval.from_uint64(v)  # Set the parsing function
result = transaction.sign_and_submit(source_keypair, force=True)

print(result)